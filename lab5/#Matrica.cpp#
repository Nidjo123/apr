#include "Matrica.hpp"

//////////// Matrica_exception
Matrica_exception::Matrica_exception() {
}

Matrica_exception::Matrica_exception(const std::string s) : message(s) {
}

Matrica_exception::~Matrica_exception() noexcept {}

const char* Matrica_exception::what() const noexcept {
  return message.c_str();
}
////////////

// funkcija za ispitivanje funkcionalnosti
void test() {
  std::cout << "Test" << std::endl;

  Matrica<double> A("test.txt");

  A.ispis();

  Matricad B = A.t();

  B.ispis();

  (B * 2).ispis();
  (2 * B).ispis();

  std::cout << ((B * 3.14) == (3.14 * B)) << std::endl;

  (A * B).ispis();

  (Matricad::jedinicna(3) * Matricad::jedinicna(3)).ispis();

  Matricad C = (A * B * Matricad::jedinicna(3));

  (-C).ispis();

  try {
    (C -= Matricad::jedinicna(3)).ispis();
  } catch(std::exception e) {
    std::cerr << e.what() << std::endl;
  }
}

/*
int main2(int argc, char *argv[]) {
  //test();

  if (argc < 4) {
    std::cerr << "Argumenti: matrica_A matrica_b (LU|LUP)";
    return 1;
  }

  const std::string metoda(argv[3]);

  if (metoda != "LU" && metoda != "LUP") {
    std::cerr << "Nepodrzana metoda: " << metoda;
    return 1;
  }

  Matricad A(argv[1]), b(argv[2]);

  std::cout << "Ucitane matrice:\nA:\n";
  A.ispis();
  std::cout << "b:\n";
  b.ispis();

  std::cout << "Koristim metodu: " << metoda << std::endl;

  try {
    Matricad X;
    
    if (metoda == "LU") {
      X = A.LU_dekompozicija();
    } else {
      X = A.LUP_dekompozicija(b);
    }

    std::cout << "Dekompozicija zavrsena, dobivena matrica: \n";
    X.ispis();

    std::cout << "Radim supstituciju unaprijed.\n";
    Matricad y{X.supstitucija_unaprijed(b)};

    std::cout << "Vektor y:\n";
    y.ispis();

    std::cout << "Radim supstituciju unatrag.\n";
    Matricad x{X.supstitucija_unatrag(y)};

    std::cout << "Vektor x (rjesenje):\n";
    x.ispis();
  } catch (Matrica_exception e) {
    std::cerr << e.what() << std::endl;
  } catch (std::exception e) {
    std::cerr << e.what() << std::endl;
  }

  return 0;
} 
*/
/*
int main2() {
  Matricad A("inverz.txt");

  A.inv().ispis();

  std::valarray<double> x = {1, 2, 3};
  
  std::valarray<double> xx = (A * Matricad(x));

  for (auto &xi : xx) std::cout << xi << std::endl;
}
*/
